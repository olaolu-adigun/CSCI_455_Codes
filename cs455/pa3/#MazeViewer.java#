// Name: ADIGUN OLAOLUWA 
// USC loginid: adigun
// CS 455 PA3
// Spring 2016

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.JFrame;
import java.util.Scanner;


/**
 * MazeViewer class
 * 
 * Program to read in and display a maze and a path through the maze. At user
 * command displays a path through the maze if there is one.
 * 
 * How to call it from the command line:
 * 
 *      java MazeViewer mazeFile
 * 
 * where mazeFile is a text file of the maze. The format is the number of rows
 * and number of columns, followed by one line per row, followed by the start location, 
 * and ending with the exit location. Each maze location is
 * either a wall (1) or free (0). Here is an example of contents of a file for
 * a 3x4 maze, with start location as the top left, and exit location as the bottom right
 * (we count locations from 0, similar to Java arrays):
 * 
 * 3 4 
 * 0111
 * 0000
 * 1110
 * 0 0
 * 2 3
 * 
 */

public class MazeViewer {
   
   private static final char WALL_CHAR = '1';
   private static final char FREE_CHAR = '0';

   public static void main(String[] args)  {

      String fileName = "";

      try {

         if (args.length < 1) {
            System.out.println("ERROR: missing file name command line argument");
         }
         else {
            fileName = args[0];           
            
            JFrame frame = readMazeFile(fileName);

            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

            frame.setVisible(true);
         }
      }
      catch (FileNotFoundException exc) {
         System.out.println("File not found: " + fileName);
      }
      catch (IOException exc) {
         exc.printStackTrace();
      }
   }


   /**
    readMazeFile reads in maze from the file whose name is given and 
    returns a MazeFrame created from it.
   @param fileName
             the name of a file to read from (file format shown in class comments, above)
   @returns a MazeFrame containing the data from the file.
        
   @throws FileNotFoundException
              if there's no such file (subclass of IOException)
   @throws IOException
              (hook given in case you want to do more error-checking.
               that would also involve changing main to catch other exceptions)
   */
   private static MazeFrame readMazeFile(String fileName) throws IOException {

      File inputFile = new File(fileName);
      Scanner in = new Scanner(inputFile);

      // Read the number of rows and columns for the maze
      boolean[][] theMaze = new boolean[in.nextInt()][in.nextInt()];
	
      theMaze = readMazeContent(theMaze, in);// Read the content of the file into a 2D-array
      int[] loc = new int[4];
      int i = 0;
      while (i < 4 && in.hasNextInt())
      {
	loc[i] = in.nextInt();
	i++;
      }
      return new MazeFrame(theMaze, new MazeCoord(loc[0], loc[1]), new MazeCoord(loc[2], loc[3]));
   } 

   
   /**
      Read the content of Scanner object into a 2D array
      @params theMaze is a 2D array of the same with the content of scanner in
      @params in contains the file content for maze
      @returns the 2D array contain the content of in
      
      PRE: Scanner in contains the maze information with only 0 and 1 elements.
   */
   private static boolean[][] readMazeContent(boolean [][] theMaze, Scanner in)
   {
      String line = "";
      for (int i = 0; i < theMaze.length ; i++)
      {
	 line = in.next();
	 for (int j = 0; j < theMaze[0].length ; j++)
	 {
	    if (line.charAt(j) ==  WALL_CHAR)
	    {
	       theMaze [i][j] = true;
	    }
	    if(line.charAt(j) == FREE_CHAR)
	    {
	       theMaze[i][j] = false;
	    }
	 }
      }
      return theMaze;
   }
   
 
}
